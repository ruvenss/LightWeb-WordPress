<?php
/*
/*
Plugin Name: LightWeb WordPress
Description: Sends an event to your LightWeb server when a post is created or updated.
Version: 1.0.0
Author: NIZU <marvin.ai@nizu.io>
Author URI: https://nizu.io/en/
Text Domain: NIZU
Network: true
Requires at least: 3.9
Requires PHP: 8.1
License: GPLv3
License URI: https://raw.githubusercontent.com/ruvenss/LightWeb-WordPress/main/LICENSE
*/

// Hook into post creation and update
add_action('save_post', 'lightweb_send_post_event', 10, 3);

function lightweb_send_post_event($post_ID, $post, $update)
{
    // Ensure the function runs only once per post creation or update
    if (wp_is_post_revision($post_ID) || wp_is_post_autosave($post_ID)) {
        return;
    }
    // Define the URL of the remote server
    $remote_url = 'https://stage.energieplus-lesite.be/api/';
    $auto_publish = true;
    switch ($post->post_type) {
        case 'post':
            $header = 'header_post.html';
            $footer = 'footer_post.html';
            break;
        case 'page':
            $header = 'header.html';
            $footer = 'footer.html';
            break;
        default:
            # code...
            break;
    }
    // Prepare data to send
    $permalink = get_permalink($post->ID);
    $data = array(
        'a' => 'wp_article_update',
        'post_id' => $post_ID,
        'post_title' => base64_encode($post->post_title),
        'post_description' => get_post_meta($post_ID, "description", true),
        'post_content' => base64_encode($post->post_content),
        'post_status' => $post->post_status,
        'post_author' => $post->post_author,
        'post_date' => $post->post_date,
        'post_modified' => $post->post_modified,
        'post_uri' => $post->post_uri,
        'post_type' => $post->post_type,
        'post_parent' => $post->post_parent,
        'post_permalink' => base64_encode($permalink),
        'featured_image' => wp_get_attachment_url(get_post_thumbnail_id($post_ID)),
        'header' => $header,
        'footer' => $footer,
        'secret' => AUTH_KEY,
        'site_url' => site_url(),
        'update' => $update
    );
    // Convert data to JSON format
    $data_json = json_encode($data);
    // Initialize cURL session
    $ch = curl_init($remote_url . "v1/?a=wp_article_update");
    // Set cURL options
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data_json);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt(
        $ch,
        CURLOPT_HTTPHEADER,
        array(
            'Content-Type: application/json',
            'Content-Length: ' . strlen($data_json)
        )
    );
    // Execute cURL session and get response
    $response = curl_exec($ch);
    curl_close($ch);
    // Check for cURL errors
    // Log the response from the remote server
    if (curl_errno($ch)) {
        error_log('cURL error: ' . curl_error($ch));
    } else {
        if (json_decode($response, true)) {
            $data = json_decode($response, true);
            if (isset($data['data']['Authorization'])) {
                $lightweb_Authorization = $data['Authorization'];
                if ($auto_publish) {
                    lightweb_publish($remote_url, $lightweb_Authorization);
                }
            }
        }

    }
    // Close cURL session
}
function lightweb_publish($remote_url, $lightweb_Authorization)
{
    $curl = curl_init();
    curl_setopt_array(
        $curl,
        array(
            CURLOPT_URL => $remote_url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_POSTFIELDS => '{"a":"publish"}',
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
                'Authorization: Bearer ' . $lightweb_Authorization
            ),
        )
    );
    $response = curl_exec($curl);
    curl_close($curl);
}
/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */

class LightWeb
{
    private $lightweb_options;

    public function __construct()
    {
        add_action('admin_menu', array($this, 'lightweb_add_plugin_page'));
        add_action('admin_init', array($this, 'lightweb_page_init'));
    }

    public function lightweb_add_plugin_page()
    {
        add_management_page(
            'LightWeb', // page_title
            'LightWeb', // menu_title
            'manage_options', // capability
            'lightweb', // menu_slug
            array($this, 'lightweb_create_admin_page') // function
        );
    }

    public function lightweb_create_admin_page()
    {
        $this->lightweb_options = get_option('lightweb_option_name'); ?>

        <div class="wrap">
            <h2>LightWeb</h2>
            <p>LightWeb settings</p>
            <?php settings_errors(); ?>

            <form method="post" action="options.php">
                <?php
                settings_fields('lightweb_option_group');
                do_settings_sections('lightweb-admin');
                submit_button();
                ?>
            </form>
        </div>
    <?php }

    public function lightweb_page_init()
    {
        register_setting(
            'lightweb_option_group', // option_group
            'lightweb_option_name', // option_name
            array($this, 'lightweb_sanitize') // sanitize_callback
        );

        add_settings_section(
            'lightweb_setting_section', // id
            'Settings', // title
            array($this, 'lightweb_section_info'), // callback
            'lightweb-admin' // page
        );

        add_settings_field(
            'lightweb_stage_server_0', // id
            'LightWeb Stage Server', // title
            array($this, 'lightweb_stage_server_0_callback'), // callback
            'lightweb-admin', // page
            'lightweb_setting_section' // section
        );

        add_settings_field(
            'auto_publish_when_a_post_is_created_or_updated_1', // id
            'Auto Publish when a post is created or updated', // title
            array($this, 'auto_publish_when_a_post_is_created_or_updated_1_callback'), // callback
            'lightweb-admin', // page
            'lightweb_setting_section' // section
        );
    }

    public function lightweb_sanitize($input)
    {
        $sanitary_values = array();
        if (isset($input['lightweb_stage_server_0'])) {
            $sanitary_values['lightweb_stage_server_0'] = sanitize_text_field($input['lightweb_stage_server_0']);
        }

        if (isset($input['auto_publish_when_a_post_is_created_or_updated_1'])) {
            $sanitary_values['auto_publish_when_a_post_is_created_or_updated_1'] = $input['auto_publish_when_a_post_is_created_or_updated_1'];
        }

        return $sanitary_values;
    }

    public function lightweb_section_info()
    {

    }

    public function lightweb_stage_server_0_callback()
    {
        printf(
            '<input class="regular-text" type="text" name="lightweb_option_name[lightweb_stage_server_0]" id="lightweb_stage_server_0" value="%s">',
            isset($this->lightweb_options['lightweb_stage_server_0']) ? esc_attr($this->lightweb_options['lightweb_stage_server_0']) : ''
        );
    }
    public function auto_publish_when_a_post_is_created_or_updated_1_callback()
    {
        ?> <select name="lightweb_option_name[auto_publish_when_a_post_is_created_or_updated_1]"
            id="auto_publish_when_a_post_is_created_or_updated_1">
            <?php $selected = (isset($this->lightweb_options['auto_publish_when_a_post_is_created_or_updated_1']) && $this->lightweb_options['auto_publish_when_a_post_is_created_or_updated_1'] === 'true') ? 'selected' : ''; ?>
            <option value="true" <?php echo $selected; ?>>Yes</option>
            <?php $selected = (isset($this->lightweb_options['auto_publish_when_a_post_is_created_or_updated_1']) && $this->lightweb_options['auto_publish_when_a_post_is_created_or_updated_1'] === 'false') ? 'selected' : ''; ?>
            <option value="false" <?php echo $selected; ?>>No</option>
        </select>
        <?php
    }

}
if (is_admin())
    $lightweb = new LightWeb();

/* 
 * Retrieve this value with:
 * $lightweb_options = get_option( 'lightweb_option_name' ); // Array of All Options
 * $lightweb_stage_server_0 = $lightweb_options['lightweb_stage_server_0']; // LightWeb Stage Server
 * $auto_publish_when_a_post_is_created_or_updated_1 = $lightweb_options['auto_publish_when_a_post_is_created_or_updated_1']; // Auto Publish when a post is created or updated
 */
